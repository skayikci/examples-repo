buildscript {
	ext {
		grpcVersion = '1.30.0'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.12'
	}
}


plugins {
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id "com.google.protobuf" version "0.8.12"
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile "io.grpc:grpc-netty:${grpcVersion}"
	compile "io.grpc:grpc-services:${grpcVersion}"
	compile "io.grpc:grpc-protobuf:${grpcVersion}"
	compile "io.grpc:grpc-stub:${grpcVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

subprojects {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	tasks.withType(JavaCompile) {
		sourceCompatibility = "1.8"
		targetCompatibility = "1.8"
	}
}

sourceSets {
	main {
		proto {
			srcDir 'src/main/proto'
		}
		java {
			// include self written and generated code
			srcDirs 'src/main/java', 'generated-sources/main/java', 'generated-sources/main/grpc'
		}
	}
}

protobuf {
	// Configure the protoc executable
	protoc {
		// Download from repositories
		artifact = 'com.google.protobuf:protoc:3.0.2'
	}

	// Configure the codegen plugins
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}

	generateProtoTasks.generatedFilesBaseDir = 'generated-sources'

	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

test {
	useJUnitPlatform()
}
